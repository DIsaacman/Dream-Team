

### Required Libraries ###
from datetime import datetime
from dateutil.relativedelta import relativedelta
from botocore.vendored import requests
import pickle
import boto3
import logging
logging.getLogger().setLevel(logging.INFO)



### Functionality Helper Functions ###
def parse_float(n):
    """
    Securely converts a non-numeric value to float.
    """
    try:
        return float(n)
    except ValueError:
        return float("nan")


def build_validation_result(is_valid, violated_slot, message_content):
    """
    Defines an internal validation message structured as a python dictionary.
    """
    if message_content is None:
        return {"isValid": is_valid, "violatedSlot": violated_slot}

    return {
        "isValid": is_valid,
        "violatedSlot": violated_slot,
        "message": {"contentType": "PlainText", "content": message_content},
    }


def validate_data(loan_amount, intent_request):
    """
    Validates the data provided by the user.
    """

    # Validate the amount, it should be > 0
    if loan_amount is not None:
        loan_amount = parse_float(
            loan_amount
        )  # Since parameters are strings it's important to cast values
        if loan_amount <= 0:
            return build_validation_result(
                False,
                "amount",
                "The amount should be greater than zero, "
                "please provide a correct amount in dollars.",
            )

    # A True results is returned if age or amount are valid
    return build_validation_result(True, None, None)


### Dialog Actions Helper Functions ###
def get_slots(intent_request):
    """
    Fetch all the slots and their values from the current intent.
    """
    return intent_request["currentIntent"]["slots"]


def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):
    """
    Defines an elicit slot type response.
    """

    return {
        "sessionAttributes": session_attributes,
        "dialogAction": {
            "type": "ElicitSlot",
            "intentName": intent_name,
            "slots": slots,
            "slotToElicit": slot_to_elicit,
            "message": message,
        },
    }


def delegate(session_attributes, slots):
    """
    Defines a delegate slot type response.
    """

    return {
        "sessionAttributes": session_attributes,
        "dialogAction": {"type": "Delegate", "slots": slots},
    }


def close(session_attributes, fulfillment_state, message):
    """
    Defines a close slot type response.
    """

    response = {
        "sessionAttributes": session_attributes,
        "dialogAction": {
            "type": "Close",
            "fulfillmentState": fulfillment_state,
            "message": message,
        },
    }

    return response

### Intent Handler ML ###
def run_ml(intent_request):
    
    # Gets slots' values
    person_home_ownership = get_slots(intent_request)["person_home_ownership"]
    person_age = get_slots(intent_request)["person_age"]
    person_income = get_slots(intent_request)["person_income"]
    loan_amount = get_slots(intent_request)["loan_amount"]


    # Gets the invocation source, for Lex dialogs "DialogCodeHook" is expected.
    source = intent_request["invocationSource"]

    if source == "DialogCodeHook":
        # This code performs basic validation on the supplied input slots.

        # Gets all the slots
        slots = get_slots(intent_request)

        # Validates user's input using the validate_data function
        validation_result = validate_data(dollars, intent_request)

        # If the data provided by the user is not valid,
        # the elicitSlot dialog action is used to re-prompt for the first violation detected.
        if not validation_result["isValid"]:
            slots[validation_result["violatedSlot"]] = None  # Cleans invalid slot

            # Returns an elicitSlot dialog to request new data for the invalid slot
            return elicit_slot(
                intent_request["sessionAttributes"],
                intent_request["currentIntent"]["name"],
                slots,
                validation_result["violatedSlot"],
                validation_result["message"],
            )

        # Fetch current session attributes
        output_session_attributes = intent_request["sessionAttributes"]

        # Once all slots are valid, a delegate dialog is returned to Lex to choose the next course of action.
        return delegate(output_session_attributes, get_slots(intent_request))

    if person_home_ownership == "mortgage":
    
        person_home_ownership_MORTGAGE = 1
        person_home_ownership_OTHER = 0
        person_home_ownership_OWN = 0
        person_home_ownership_RENT = 0
    
    if person_home_ownership == "other":
    
        person_home_ownership_MORTGAGE = 0
        person_home_ownership_OTHER = 1
        person_home_ownership_OWN = 0
        person_home_ownership_RENT = 0
    
    if person_home_ownership == "own":
    
        person_home_ownership_MORTGAGE = 0
        person_home_ownership_OTHER = 0
        person_home_ownership_OWN = 1
        person_home_ownership_RENT = 0

    if person_home_ownership == "rent":
    
        person_home_ownership_MORTGAGE = 0 
        person_home_ownership_OTHER = 0
        person_home_ownership_OTHER = 0
        person_home_ownership_OWN = 0
        person_home_ownership_RENT = 1

    X_test_scaled = [
    
        person_home_ownership_MORTGAGE,
        person_home_ownership_OTHER,
        person_home_ownership_OWN,
        person_home_ownership_RENT,
        person_age,
        person_income,
        loan_amount]
        
        
    s3 = boto3.resource('s3')
    my_pickle = pickle.loads(s3.Bucket("ml-models-dream-team").Object("AdaBoost_model_1.sav").get()['Body'].read())
    result = my_pickle.predict(X_test_scaled)
    logging.warn(result)


    # Return a message with conversion's result.
    return close(
        intent_request["sessionAttributes"],
        "Fulfilled",
        {
            "contentType": "PlainText",
            "content": """Thank you. As of {}, .
            .
            """.format(result
            ),
        },
    )






### Intents Dispatcher ###
def dispatch(intent_request):
    """
    Called when the user specifies an intent for this bot.
    """

    # Get the name of the current intent
    intent_name = intent_request["currentIntent"]["name"]

    # Dispatch to bot's intent handlers
    if intent_name == "getLoan":
        return run_ml(intent_request)

    raise Exception("Intent with name " + intent_name + " not supported")

    ### Intents Dispatcher ###



### Main Handler ###
def lambda_handler(event, context):
    """
    Route the incoming request based on intent.
    The JSON body of the request is provided in the event slot.
    """

    return dispatch(event)

